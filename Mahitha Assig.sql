1.	Write a query to find the second highest salary from the Employees table.
2.	Create a stored procedure to calculate the total sales amount for a given month and year.
3.	Explain the difference between ROW_NUMBER(), RANK(), and DENSE_RANK() with examples.
4.	Write a query to display the top 5 departments with the highest average salary of employees.
5.	Design a trigger to enforce referential integrity between two tables.
6.	Explain the use of the CONNECT BY clause in Oracle hierarchical queries.
7.	Write a query to find all employees who have the same salary as the highest-paid employee.
8.	Create a PL/SQL function to calculate the factorial of a given number.
9.	Explain the purpose and syntax of the MERGE statement in Oracle.
10.	Write a query to identify duplicate rows in a table based on certain columns.
11.	Design a procedure to archive old data from a table to an archive table.
12.	Explain the use of the FORALL statement in PL/SQL and provide an example.
13.	Write a query to find the nth highest salary from the Employees table.
14.	Create a trigger to automatically update a column in a table when another column is modified.
15.	Explain the difference between TRUNCATE and DELETE statements in Oracle.
16.	Write a query to find the total number of employees hired each year.
17.	Design a PL/SQL block to handle exceptions during data processing.
18.	Explain the concept of cursor variables (REF CURSOR) in PL/SQL.
19.	Write a query to display employees who do not belong to any department.
20.	Create a function to calculate the Fibonacci sequence up to a given number of terms.
21.	Explain the benefits of using PL/SQL collections over traditional arrays. (No Need, Advanced)
22.	Write a query to find the longest consecutive sequence of numbers in a table.
23.	Design a trigger to audit changes made to a specific column in a table.
24.	Explain the purpose of the NOCOPY hint in PL/SQL parameter passing. (Advanced)
25.	Write a query to display the department-wise count of employees along with the highest and lowest salary in each department.
26.	Create a stored procedure to generate a random password of a specified length.
27.	Explain the difference between a function and a procedure in PL/SQL.
28.	Write a query to find the total number of orders placed in each quarter of a year.
29.	Design a trigger to prevent deletion of records from a table based on certain conditions.
30.	Explain the use of the BULK COLLECT clause in PL/SQL.
31.	Write a query to identify circular dependencies in a hierarchical data structure.
32.	Create a function to calculate the area of a circle based on its radius.
33.	Explain the purpose of autonomous transactions in PL/SQL.
34.	Write a query to display the top 10% of customers based on their total order amount.
35.	Design a stored procedure to calculate the average salary increase for employees each year.
36.	Explain the concept of implicit and explicit cursors in PL/SQL.
37.	Write a query to find the employees who joined the company before their managers.
38.	Create a trigger to enforce business rules before inserting data into a table.
39.	Explain the benefits of using the %TYPE and %ROWTYPE attributes in PL/SQL.
40.	Write a query to find the median salary of employees in each department.
41.	Design a PL/SQL block to handle bulk data processing efficiently.
42.	Explain the use of the MODEL clause in Oracle SQL.
43.	Write a query to identify overlapping date ranges in a table.
44.	Create a function to calculate the distance between two geographical coordinates.
45.	Explain the purpose of the PRAGMA EXCEPTION_INIT directive in PL/SQL. (Advanced)
46.	Write a query to display the hierarchical structure of employees in a company.
47.	Design a trigger to maintain a history of changes made to a table.
48.	Explain the difference between BEFORE and AFTER triggers in Oracle.
49.	Write a query to find the top 3 products with the highest sales in each category.
50.	Create a stored procedure to calculate the total revenue generated by each product.
51.	Explain the use of the MODEL clause in Oracle SQL for predictive modelling.
52.	Write a query to identify potential performance bottlenecks in SQL statements.
53.	Design a trigger to enforce complex security policies on sensitive data.
54.	Explain the benefits of using bulk binds in PL/SQL.
55.	Write a query to find the customers who have not placed any orders in the last six months.
56.	Create a function to validate email addresses according to a specified format.
57.	Explain the use of the PRAGMA RESTRICT_REFERENCES directive in PL/SQL. (Advanced)
58.	Write a query to calculate the running total of sales amount over time.
59.	Design a stored procedure to generate monthly reports based on sales data.
60.	Explain the advantages of using PL/SQL over SQL for complex business logic implementation.
61.	Write a query to find the top 3 customers with the highest total order amount.
62.	Create a query to calculate the total number of orders placed by each customer.
63.	Write a query to display the monthly sales trend for the past year.
64.	Design a query to identify products that have never been ordered.
65.	Write a query to find the customers who have placed orders in all product categories.
66.	Create a query to calculate the average order amount for each month of the year.
67.	Write a query to display the top 5 products with the highest profit margin.
68.	Design a query to identify customers who have placed orders exceeding a certain total amount.
69.	Write a query to find the total number of orders shipped late each month.
70.	Create a query to calculate the cumulative sum of sales amount over time for each product.
71.	Write a query to find the customers who have placed orders on consecutive days.
72.	Design a query to identify the most popular product category based on the number of orders.
73.	Write a query to display the top 10% of customers who have spent the most money.
74.	Create a query to calculate the percentage contribution of each product category to total sales.
75.	Write a query to find the average shipping time for each product.
76.	Design a query to identify customers who have not placed any orders in the last six months.
77.	Write a query to display the products with the highest sales in each region.
78.	Create a query to calculate the average time between order placement and shipment.
79.	Write a query to find the customers who have placed orders in all regions.
80.	Design a query to identify the products that have experienced a significant increase or decrease in sales compared to the previous year.

Tables:

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    Region VARCHAR(50)
);

INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Region)
VALUES
    (101, 'John', 'Doe', 'john.doe@example.com', 'North'),
    (102, 'Jane', 'Smith', 'jane.smith@example.com', 'South'),
    (103, 'Michael', 'Johnson', 'michael.johnson@example.com', 'East'),
    (104, 'Emily', 'Williams', 'emily.williams@example.com', 'West'),
    (105, 'David', 'Brown', 'david.brown@example.com', 'Central');

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    UnitPrice DECIMAL(10, 2)
);

INSERT INTO Products (ProductID, ProductName, Category, UnitPrice)
VALUES
    (201, 'Product A', 'Electronics', 500.00),
    (202, 'Product B', 'Clothing', 35.00),
    (203, 'Product C', 'Home & Kitchen', 120.00),
    (204, 'Product D', 'Electronics', 800.00),
    (205, 'Product E', 'Furniture', 1000.00);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    ProductID INT,
    OrderDate DATE,
    ShipDate DATE,
    Amount DECIMAL(10, 2),
    CONSTRAINT fk_customer FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    CONSTRAINT fk_product FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Orders (OrderID, CustomerID, ProductID, OrderDate, ShipDate, Amount)
VALUES
    (301, 101, 201, '2023-01-10', '2023-01-15', 500.00),
    (302, 102, 202, '2023-02-15', '2023-02-18', 70.00),
    (303, 103, 203, '2023-03-20', '2023-03-25', 240.00),
    (304, 104, 204, '2023-04-25', '2023-04-30', 800.00),
    (305, 105, 205, '2023-05-30', '2023-06-05', 1200.00);

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES
    (101, 'Finance'),
    (102, 'Marketing'),
    (103, 'HR'),
    (104, 'Sales'),
    (105, 'IT');
